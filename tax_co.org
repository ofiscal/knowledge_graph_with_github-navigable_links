:PROPERTIES:
:ID:       dc968fea-dd45-4734-b375-9e60b87005c6
:END:
#+title: tax.co
* TODO try touching a file that makes Haskell run again
  or add Haskell files to the Makefile
* TODO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/add_ss_taxes_to_sim_output_2023_11_17_fri_tax_co.org][add SS taxes to sim output <2023-11-17 Fri> \ tax.cco]]
* TODO ? Pension income should mostly be exempt from income tax.
:PROPERTIES:
:ID:       c0c23f3f-4e53-4634-83cc-12c94d921f71
:END:
  Is something subtracted from it at some point?
* TODO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/make_microsimulation_if_possible_match_dane_s_and_gabriel_s_income_stats.org][make microsimulation (if possible) match DANE's and Gabriel's income stats]]
* TODO ? quantiles are computed without weights.
  This might be the best way to do it:
  https://stackoverflow.com/questions/21844024/weighted-percentile-using-numpy/63440143#63440143
  Oliver believes Gabriel already did this.
* SEE ALSO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/tax_co_web.org][tax.co.web]]
* refs
** github
   https://github.com/ofiscal/tax.co
   git clone git@github.com:ofiscal/tax.co.git
** [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/tax_co_the_paper_about.org][tax.co, the paper about]]
** [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/tricks.org][tricks - how to do some things]]
** [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/multi_sample_estimation_econometrics.org][Multi-Sample Estimation (econometrics)]]
** [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/how_to_onboard_someone_to_the_tax_co_repositories.org][how to onboard someone to the tax.co* repositories]]
* reasons our total income measure might not match DANE's
** reasons, via Juan Miguel Villa
*** Value of house
*** Autoconsumo (e.g. farming)
** Daniel says he thinks we considered these
   and had good reason not to include them.
* TODO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/un_hardcode_those_zero_income_tests_tax_co.org][un-hardcode those zero-income tests \ tax.co]]
* TODO ? I restored all the data sets that were disabled in var_summaries_by_group, but have not updated the Makefile accordingly.
  and it's not clear that I should.
  Maybe I should just put one of them as a representative.
* TODO BUG: Why did compare.py get stuck for a day?
   When I killed it, make completed, with a "terminated by user" error in the stderr file but otherwise the stdout file looked normal.
   Does the sim not like negative tax rates? That's the only difference I see between the run that got stuck (had negative rates) and the one that merely ran compare.py three times.
* TODO | PITFALL: [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/do_not_exceed_daily_automatic_gmail_send_limit.org][Do not exceed daily automatic Gmail send limit.]]
* TODO long-term: use [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/geih.org][geih]] to supplement the [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/enph.org][enph]]
** some people Oliver thinks could help
   [[https://github.com/JeffreyBenjaminBrown/org_personal-most_with-github-navigable_links/blob/master/jairo_nunez.org][Jairo Nu√±ez]] + David Guerrero (Externado) + someone junior (ask him)
** TODO separate growth rates: labor, capital, pension, maybe dividend
** [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/multi_sample_estimation_econometrics.org][Multi-Sample Estimation (econometrics)]]
** goal: maximally up-to-date income, expenditure data
** GEIH has no consumption data
** the "Medicion de Pobreza ..."
ask Daniel about it
is a good measure of income distribution
* TODO use [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/pyright.org][Pyright]]
* TODO Would be cool if there were a field for a user-provided name.
* include interpreting-the-output.md in attachments
modified   python/requests/main.py
@@ -179,7 +179,8 @@ def advance_request_queue ():
           + glob.glob ( os.path.join ( data_path, "change-in*by*.png" ) )
           + glob.glob ( os.path.join ( data_path, "changes_*.xlsx" ) )
           + [ os.path.join ( data_path,
-                             "../../logs.zip" ) ] ) )
+                             "../../logs.zip" ),
+              "markdown/interpreting-the-output.md" ] ) )
       with open( defs.global_log_path, "a" ) as f:
         f . write( "Email: Done.\n" )
* TODO Incorporate test_dependentsToClaim () into Makefile.
  in python/build/people_3_income_taxish_functions.py
* TODO Is GO making total income tax non-monotonic?
  ganancias ocasionales, non-monotonic total income tax rate
  for poor people, GO is more likely to put them over the tax-paying threshold, so GO is a bigger fraction of poor taxpayers' incomes than richer ones, but then for the richest it becomes a big fraction again
* TODO ? draw a poverty line
* verify we don't use retencion en la fuente
  P1652S2 & P1652S2A1
* [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/extending_tax_co_with_quantile_data_from_dian.org][extending tax.co with quantile data from DIAN]]
* TODO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/gender_split_data_sets_might_have_bad_quantile_definitions.org][gender-split data sets might have bad quantile definitions]]
* TODO Solve / Internalize : If the strategy changes but a user already has data generated from the other one, the makefile gets confused.
  A dumb solution is to nuke the user's data folder
  each time its strategy changes.

  A better one would be to write a file when the strategy changes,
  and make others depend on that.
* Can we identify employment sector, formality
** SS contribs for pension are a good proxy, but incomplete.
   Someone could be pensioned and working.
* TODO use this kind of test for quantiles
per_column_spec = {
    "age-decile"    : cl.CoversRange( 0, 9 ),
    "female head"   : cl.CoversRange( 0, 1 ) }

for k,v in per_cell_spec.items():
  assert v . test( out[k] )
* TODO It's confusing that the baseline gets emailed too.
* TODO ? [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/rewrite_algorithm_to_compute_cedula_gravable_general.org][rewrite algorithm to compute cedula gravable general]]
* TODO Inflate from 2017 to 2022
* TODO automate this test
  python/regime/test.py
* TODO run mypy everywhere
  As of <2022-07-21 Thu>,
  I've run it on all the top-level files in these folders:
    python/
    python/build/
  as well as on
    bash/run-makefile.py
* TODO why does (e.g.) ss_functions_test.py install into a user folder?
  in make/Makefile.tests, there's this passage:

    users/$(user)/test/recip-1/build_ss_functions.txt:               \
      .no_younger_than/python/build/ss/functions_test.py
    	date
    	$(python_from_here) python/build/ss/functions_test.py \
              $(config_file)

  Other tests are likely to have the same property --
  specifically, those that install to a recip-1/ subfolder,
  rather than recip-$(ss) ($(ss) being the subsample).
* TODO add tests for "income, capital"
* TODO remove layers of indirection in people/main.py
  There are too many definitions like income_short_name_dict_cash.
  They make refactoring a nightmare.
  Unless such a thing gets used many times, don't bother defining it.
* TODO ? Use [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/parquet_file_format.org][parquet (file format)]].
* How to see that total income includes (exactly once) all capital income
** dividends are covered exactly once
It's only in income_short_name_dict_cash,
and that is part of cash income,
which is part of income.
** interest and rental income
are only in "income, capital (tax def)",
which is part of cash income.
** non-RE sales are in two things
*** "income, sale not real estate" is part of cash income
*** "income, non-labor" is defined in main.py but not used in it
** RE sales are in two things
*** "total income, monthly : infrequent" is part of cash income
It is added into `cols_infrequent` separately,
because it is not part of `income_infrequent`.
*** "income, ganancia ocasional, 10%-taxable" is not used further in main.py
* TODO Why do I use Anaconda?
* TODO add new DIAN data
** TODO BOTTOM LINE: until PILA, job is to use DIAN data for payroll and income taxes on the rich
** one running variable: gross income, not considering costs
** people file with 0 income if they have enough wealth or credit card transactions
** 13 of the miltiles have 0 income
** better than a random sample
   we know exactly how many pesos have been declared in Colombia
** use DIAN data for high income quantiles
** check the tax burden from the DIAN data to the one we calculate
** payroll taxes are not on income tax returns
** compute payroll taxes based on labor income
   The ENPH data on this is probably wrong, not even worth checking.
** the VAT tax will come from the ENPH
** the PILA: another data source
   Planilla Integrada de Liquidacion de Aportes.
   We might get it.
   If so, use PILA for payroll taxes for everyone who makes min wage or more.
   Otherwise, DIAN for both payroll and income taxes for the rich, ENPH for the rest.
* TODO update documentation
** the way it's run is now completely different
* TODO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/tax_co_web.org][put tax.co online]]
* TODO clean
** try pydoc
** do subprocess the same everywhere
   and make it a function (to define my_env, etc.)
** use this rule in Makefile.deps
   [ -f $@ ] && touch $@
   That way I don't have to keep the parallel .no_younger_than folder.
*** if it works, provide feedback
    https://stackoverflow.com/questions/65947352/makefile-how-to-recursively-trace-a-programs-import-hierarchy?noredirect=1#comment116761513_65947352
** rename
   people/ -> people_1/
   purchases/ -> purchases_1/
** ? tests (mostly?) do not have to be user-specific
   PITFALL: At least one of them, rate_input_test,
   is in fact user-specific.
** test evidence should mirror the file tree
   Currently it is flat.
   This would only require rewriting the calls to oio.test_write()
   and the locations of the evidence in the makefile.
** move repl.json from config/ to users/repl/
   And add a README explaining that two of the folders,
   repl and example, aren't real users.
   Note that repl.json is referred to in make/ and python/.
** ? unduplicate the other non-user-specific files
   Probably, none of the first files constructed -- people_0, purchases_0, etc. -- are too small to warrant unduplication, but their construction might be slow, which would.
* TODO clarify income totals
:PROPERTIES:
:ID:       0818bef8-904f-4cda-9fe3-1c8dafe73b17
:END:
https://mail.google.com/mail/u/0/#inbox/KtbxLxgNNvtdCSsLXNSGsTqfdGprqpbgsq
** TODO non-labor income: no private becas, no govt non-beca edu funds?
      ppl["income, non-labor (tax def)"] = (
          ppl["income, sale not real estate"]
        + ppl["income, month : private : beca, cash"]
        + ppl["income, month : private : beca, in-kind"] )
** TODO "income, govt" and "income, private": include edu funds.
Yes.
* TODO When it's safe, delete definitions specific to the 2020 tax proposal
* TODO shared decision
** TODO cesantias + primas is mysterious
:PROPERTIES:
:ID:       ad1e6f0d-a695-41d3-885a-2f6cdef8d9d5
:END:
*** Are "cesantias + primas" not a tax?
I compute them in the SS contributions code,
as a function of someone's cash income and independent/empleado status.
But I don't label them "tax, ss" like I do the other SS contributions.
*** TODO ? add cesantias + primas to an income measure
**** Should be in denominator, and not numerator, of tax rate.
**** Formality matters.
    If an informal person makes 500K, they don't get primas + cesantias
** TODO what to do|is done about missing freq, where-got, is-purchase
is-purchase we probably assume to be 1, but the others ...?
(they are often missing)
** TODO "vat" conflates some taxes
:PROPERTIES:
:ID:       6a9d0d80-5a4f-4354-a85c-33195a15b68d
:END:
That's why, for instance, its max in purchases_2_vat_test is 0.27, not 19.
(0.27 is the total tax levied on big motorcycles --
the usual 19%, plus 8% more.)
* TODO mysteries
** TODO [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/what_are_the_aggregate_income_expenditure_variables_in_the_enph.org][What are the aggregate income, expenditure variables in the ENPH?]]
** TODO Do my income variables include SS withholdings, etc?
  Write this up somewhere.
** TODO What does "otros impuestos" include?
They represent a small but nonzero part of expenditures --
see build/purchase_sums.py.

From the coicop bridge:
  "Impuesto predial y de valorizaciÔøΩn de la(s) vivienda(s) ocupada(s) por el hogar";12700601;0;0;0;
  Impuestos del vehiculo;12700602;0;0;0;
  Impuesto de renta;12700603;0;0;0;
  Otros impuestos (de timbre, etc);12700699;0;0;0;
** TODO why are the median columns in overview.py's df_tmi called "unweighted"?
* TODO possibly wrong
** TODO is alimony a cost to someone?
   It should be.
** TODO understand, document absurdly strange (solved) bug
   Solved at commit 19a996a50a457f37da040b63f3d4a01b3e0a15b2
*** the solution
   Delete the unused "import pytest" from python.build.classes
*** the error that I was getting from run-makefile.py
 [jeff@jbb-dell:~/of/tax.co/online/users/w/4/logs]$ cat make.stderr.txt
 Traceback (most recent call last):
   File "/opt/conda/lib/python3.8/platform.py", line 613, in _syscmd_uname
     output = subprocess.check_output(('uname', option),
 AttributeError: module 'subprocess' has no attribute 'check_output'

 During handling of the above exception, another exception occurred:

 Traceback (most recent call last):
   File "python/common/misc_test.py", line 5, in <module>
     import python.common.common as cl    # throws error alone
   File "/mnt/tax_co/python/common/common.py", line 11, in <module>
     import python.build.classes as cla
   File "/mnt/tax_co/python/build/classes.py", line 12, in <module>
     import pytest
   File "/opt/conda/lib/python3.8/site-packages/pytest/__init__.py", line 3, in <module>
     from . import collect
   File "/opt/conda/lib/python3.8/site-packages/pytest/collect.py", line 8, in <module>
     from _pytest.deprecated import PYTEST_COLLECT_MODULE
   File "/opt/conda/lib/python3.8/site-packages/_pytest/deprecated.py", line 13, in <module>
     from _pytest.warning_types import PytestDeprecationWarning
   File "/opt/conda/lib/python3.8/site-packages/_pytest/warning_types.py", line 6, in <module>
     import attr
   File "/opt/conda/lib/python3.8/site-packages/attr/__init__.py", line 7, in <module>
     from . import converters, exceptions, filters, setters, validators
   File "/opt/conda/lib/python3.8/site-packages/attr/converters.py", line 7, in <module>
     from ._make import NOTHING, Factory, pipe
   File "/opt/conda/lib/python3.8/site-packages/attr/_make.py", line 7, in <module>
     import uuid
   File "/opt/conda/lib/python3.8/uuid.py", line 60, in <module>
     _platform_system = platform.system()
   File "/opt/conda/lib/python3.8/platform.py", line 891, in system
     return uname().system
   File "/opt/conda/lib/python3.8/platform.py", line 857, in uname
     processor = _syscmd_uname('-p', '')
   File "/opt/conda/lib/python3.8/platform.py", line 616, in _syscmd_uname
     except (OSError, subprocess.CalledProcessError):
 AttributeError: module 'subprocess' has no attribute 'CalledProcessError'
 make: *** [make/Makefile.tests:94: users/ub44c3f2c29071c30d701b958ac0d2837/test/recip-10/common_misc.txt] Error 1

 [jeff@jbb-dell:~/of/tax.co/online/users/w/4/logs]$
** TODO ? BUG in the 10-pct purchase data
*** this passage in purhcases/collect.py
 assert util.near(
     # PITFALL: This differs from the usual idiom which separates testing
     # from production. That's because the only thing tested here is
     # the number of rows; reading the entire data set into memory again
     # for such a simple test seems unworth the added execution time.
     len ( purchases ),
     misc . num_purchases / com . subsample,
     tol_frac = (
         1 / 20 if not com . subsample == 10
         else 1 / 2 ) )
 # TODO | BUG? Why is theprevious conditional necessary? That is, why,
 # in the special case of subsample = 1/10, is the size of the
 # purchase data so different from what you'd expect.
 # This isn't necessarily wrong, since the data is subsampled by households,
 # and households can make different numbers of purchases.
 # That's why `tol_frac` needs to be substantial in both cases.
 # But it's surprising, because for subsample = 10,
 # the expectation differs from reality by a factor just shy of 36%.
*** the same ?bug shows up in these files
    python/build/purchases/collect.py
    python/build/purchases/correct_test.py
    python/build/purchases_2_vat_test.py
*** this TODO item coincides with the following commit
    61399515e9511d3dae923a29a9af63bc93b0378b
    That's the one where I first included comments in the above-listed files
    indicating this potential problem.
** TODO BLOCKED is this really the definition for non-labor income?
*** waiting on this email
    https://mail.google.com/mail/u/0/#sent/QgrcJHsBscClkGsCMltcJxSpJLLRWwdrkRl
*** the problem
 I've got it including private beca funds, but not private non-beca funds,
 and not government edu funds.

       ppl["income, non-labor (tax def)"] = (
           ppl["income, sale not real estate"]
         + ppl["income, month : private : beca, cash"]
         + ppl["income, month : private : beca, in-kind"] )
** TODO when I build the 1/100 sample, every subsample appears in test/
** TODO main.py: All but one of the cols_govt names are yearly, not monthly.
** todo BLOCKED estrato : drop values of 9? Also 0?
https://mail.google.com/mail/u/0/#sent/KtbxLwGvWcLvtwHCGFckxfTsTZcWMnmhpL
 what do they mean?
 and then adjust the tests
** TODO pension variables are bad
They're missing a lot, so their averages aren't right.
But we don't use them.
** TODO ? throw out purchasees with absurd quantities?
Something in the full sample has a quantity value of 9e7.
* TODO test suite
** TODO [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/tests_and_io_computer_programming.org][tests and IO (computer programming)]]
** TODO My tests in tax.co don't compose.
:PROPERTIES:
:ID:       33e6fa69-2fb8-40d4-8037-cbcf19d552b4
:END:
** TODO test the names of the raw income variables
each should begin either "income, month" or "income, year"
** TODO test new variables
*** "value, consumption"
*** ICMDUG, GCMUG, etc.
** TODO why did I have to weaken these tests from the time-to-save branch?
*** The problem
In commit 5ba74b5361bfdf8453e075c68a91ab93f01ec44c
the following changes to
  python/build/households_1_agg_plus_test.py
I had to weaken one test by a factor of ten!
And disable entirely another one!
*** the changes
     assert ( ( hh [defs.income_and_tax] . sum() -
                ppl[defs.income_and_tax] . sum() )
-             . abs() . max() ) < 1e-4
+             . abs() . max() ) < 3e-3

 def test_bools( hh : pd.DataFrame,
                   ppl : pd.DataFrame ) -> ():
@@ -93,8 +92,8 @@ def test_bools( hh : pd.DataFrame,
         for c in bool_cols:
             assert hh[c].min() == 0
             assert hh[c].max() == 1
-        for c in ["age","edu"]:
-            assert hh[c + "-max"].max() == ppl[c].max()
+        # for c in ["age","edu"]:
+        #     assert hh[c + "-max"].max() == ppl[c].max()
     assert hh["age-min"].mean() < (ppl["age"].mean() * 0.8)
     assert hh["age-max"].mean() > (ppl["age"].mean() * 1.2)
** TODO homogenize tests
*** DONE assert python.common.util.unique( df.columns ) for all df
*** TODO for every .py file
**** TODO remaining files
***** build/people_3_income_taxish_test.py
***** build/classes_test.py
***** build/vat_rates_test.py
***** build/households_1_agg_plus_test.py
***** build/buildings_test.py
***** build/purchases_2_vat_test.py
***** build/ss_functions_test.py
***** build/purchases/correct_test.py
***** build/purchases/input_test.py
***** build/people/main_test.py
***** build/households_2_purchases_test.py
***** build/people_2_buildings_test.py
***** build/purchase_sums_test.py
**** use InRange, CoversRange, MeanBounds, MissingAtMost
for all new or changed vars.
**** test number of obs and column names
***** misc.unique is good for column names
def unique( coll: List ) -> bool:
  return len( coll ) == len( set( coll ) )
*** TODO test that aggregation loses nothing in purchase_sums_test.py
Compare the sum of a column in the original with same in the aggregated.** TODO add this test for income rank in people data
def test_income_ranks( ppl : pd.DataFrame ) -> ():
  prefixes = ["income, rank ", "income, labor, rank "]
  for p in prefixes:
    for n in range(1,6):
      c = p + str(n)
      m = ppl[c].mean()
      print( c, ": ", m )
      assert ppl[c] . mean() > 0.2
      assert ( (m > (0 if n > 1 else 0.2)) &
               (m < 1/n) )
*** TODO check variable types
see build/buildings_test.py for an example
** TODO purchase_sums.py: subdivide for testing
Currently the variables that are created before the groupby statement
are not "cleverly testable". I can test their means, ranges, etc.,
but I can't test certain identities without the purchase-level data.

Saving an intermediate purchase-lsevel data set containing
them would make it possible.
** TODO maybe
*** TODO incorporate tests in hand_test/ into automatic tests
 Note that not all of them can be automated --
 for instance, the ones that draw pictures.
*** TODO dtype argument for pd.read_csv should be stored for each file
 rather than coded anew every time it is read
*** TODO the logging idiom does not capture most recent test state
 A function does not record to the log unless it completes.
**** TODO solution ? need a way to delete output if python program fails
*** TODO double-check mk_solidaridad for contractors
 Is the tax code really that absurd? There are clauses that never hold.
*** TODO ? people.main:
**** Test the range and missing-ness of the input file.
**** unit tests for people/main.py
? What if a variable is built up in steps in main.py?
Should I divide main.py into a separate file for each step?
** tasks
*** restructure programs for testing
so that it's like this:

Most of the program consists of one big function definition.
  Maybe it calls sub-functions.
  If so, they should be defined outside it,
  so that they can be tested separately.
The big function's inputs and outputs are data frames.
After those definitions, there's is a read-data step,
  which is not tested (because how could it be).
Then the function is applied to the data, and the results saved somewhere.
*** each file's unit test
The test for each program file will be long.
It will begin by making a dummy dataset,
full of zeroes, one row long, with all needed columns.
Then, for each part of the file, there will be a sub-test.
For each such sub-test, include a name or comment in the file being tested,
so that it's clear which test corresponds to which part of the function.
*** the integration tests
These test the entire data pipeline.
They require making some mock input data that looks like the ENPH.
There is no separate "build" code for these data;
they use the same code that builds from the real ENPH.
However, there will be a test program for every output data product,
which tests that the product resulting from the mock ENPH
exhibit the statistics (means, min, max) they should have.

We can apply similar integration tests to a subsample of the real ENPH.
Those integration tests should test ranges, if not statistics.
** wish : shadowing was reported, but only for vars of the same type.
* TODO refactor
** TODO use os.path.join to join paths
   It handles the problem of whether a subpath ends in '/' or not.
** TODO classes.py: Things like this should be defined within each enum type.
  re_nonNumeric = re.compile( "(.+\-|.*[^0-9\s\.,\-])" )
  re_white      = re.compile( ".*[^\s].*\s.*[^\s]" )
  ...
** TODO The files that only need the full sample
   Prior to the "online" branch, the Makefile had the full sample hard-coded into their recipes, to avoid duplicating the effort of running them.
   Better (now that subsample is not a Makefile parameter)  would be for the programs run by those recipes to insert proof that the test passed in all four subsample directories.
** overview/pics.py: Makefile targets are incomplete, maybe inaccurate too
It's important that the last thing a file makes is one of the dependencies in the Makefile; otherwise, the program could fail and `make` would still think its targets are up to date.

Some output has spaces in the name; that will need to change before that output can be listed as a target.

At least one filename is duplicated. That will matter once we are again using those pictures.
* TODO personal income tax
** TODO exemptions, across >1 kind of income
*** GMF deduction: across-person worries are inapplicable.
Whereas dependents can be strategically split between parents, the GMF deduction can only be strategically used to cover one form of income or another within the same earner; it cannot be shared across income streams.
*** The exemptions applicable to labor and capital income
In the law there are four:
  medicina prepagada, mortgage interest payments, and dependents.
In the data: We can only see dependents and the GMF.
*** An exemption or deduction cannot be double-counted
e.g. for two different income types.
*** TODO the "beneficios" subtracted from renta gravable
**** answer
There are 5 types of ‚Äúbeneficios‚Äù:

(*) Renta exenta: 25% of ‚Äúrenta gravable laboral‚Äù (this deduction always operate)
(*) GMF paid: value paid in GMF in a year
(*) Dependents: 10% of ‚Äúrenta gravable laboral‚Äù until 32 UVT

The rest we don't have:
(*) Mortgage interest: value paid in interest in a year if the person have a mortgage (I think we do not have this information)
(*) Prepaid medicine: value paid in prepaid medicine if the person have this service (I think we do not have this information)
(*) AFC and pensiones voluntarias: value saved in ‚ÄúCuentas de Ahorro para el Fomento de la Construcci√≥n‚Äù and in ‚ÄúFondos voluntarios de pensi√≥n‚Äù with some conditions (I think we do not have this information)

All these benefits added can‚Äôt be more tan 40% of ‚Äúrenta gravable laboral‚Äù or 5040 UVT
**** question detail
The formulas look like this:
renta gravable laboral = renta liquida laboral
- f beneficios
where f x = min( x
               , 0% renta gravable laboral
               , 5040 uvt)
Where does a dependent enter into that formula? What else might be considered a "beneficio"?
** TODO BLOCKED tax exemptions for pension income
*** conversation with Daniel
https://mail.google.com/mail/u/0/#inbox/KtbxLwGvXzhGCMCsrQXqlVbTLpTNZWPlzL
*** the formula Juan gave me
renta gravable pension =
    ingreso pension
  - ingreso pension no constitutivo de renta
  - renta exenta hasta mil uvt
** TODO BLOCKED Can one dependent be used for one kind of income, and another for another?
*** am asking Juan if he remembers
https://mail.google.com/mail/u/0/#search/to%3Ajuan/KtbxLthRTjVQDvmgMfCRFJXPfdfFFqdZCg
** TODO pension + labor
*** TODO labor
**** DONE exempt v. deduction: solved
Exento : no paga impuesto sobre ese valor. ingresos son exentos (o no).
Deduccion : se puede restar del base gravable. gastos son deudcible (o no) de los ingresos.
**** DONE cesantias: exempt when firm sends to the "fondo de cesantias", but not when withdrawn
and what we have in the ENPH is withdrawals
**** GMF = 4 por mil. Deduct half.
**** deduct from labor income
Everything paid (by the employee) as an employee contribution to social security: deduct from base
   includes health, pension, solidarity
**** DONE absent from ENPH
pagos por Medicina Prepagada (deduccion)
pagos por donaciones en investigaci√≥n y educaci√≥n ( deducci√≥n )
aportes voluntarios a fondos de cesantias (deduccion hasta 1/12 del ingreso)
**** TODO dependent exemption is only for labor income, and only 32 uvt / month
c.f. form 210, p. 3, section "deducciones imputables"
*** TODO pension deduction
If response to P6110 is 2, then deduct value in P6120 from pension income before computing taxes. That's a health insurance contribution.
*** DONE apply Tarifa 1 to (labor + pension), not to each individually
** TODO nonlabor income
= short-term sales + non-government becas
*** general procedure
Uses Tarifa 2, after being pooled with capital income.
Deduct appropriate things from capital income,
and then add nonlabor income
(for which the law makes room for subtracting deductions,
but for which we know of no actual deductions)
before applying Tarifa 2.
*** becas (both in-kind and cash) count, unless from government
**** P8610S2 and P8610S1
The definition of "beca_sources_govt" has been changed to reflect this.
  "Son ingreso no constitutivo de renta si es otorgado por el Estado (P6207M2 = si; P6207M3 = si; P6207M4 = si; P6207M5 = si. Otherwise, ingreso no laboral, tarifa 2, sumado con los otros."
** TODO capital and dividend income
*** the data
**** three major vars: capital = (capital - dividends) + dividends
income, capital =                # first called "total income, monthly : capital"
    income, capital w/o dividends +
    income, capital, dividends   # first called "income, year : investment : dividends"
*** Sales need to be split. No sale is capital income.
**** basic idea
Real estate probably turns over less frequently than every 2 years on average, so call that "ganancia ocasional".
Other things probably should be called non-labor income.
**** TODO problem: This handles second-hand vehicle and equipment sales poorly
Second-hand sales of those things are probably less frequent than every 2 years. We are basically assuming the retail market is bigger than the second-hand market.
*** normal capital + profits from sales
**** "normal capital income"
***** income
****** do not appear
Regalias, Derechos, Wealth (from which we would caluclate Ingresos Presuntos)
****** all the "capital income" in the code is in fact capital income
***** deductions and exemptions
****** almost none appear
****** exception: GMF deduction applies either to labor or capital income
so apply it where it would reduce someone's taxes the most
**** "other profits" (will be summed with normal capital income)
***** TODO P6750 counts sometimes
If P6765=7, then P6750 is a profit, rather than a labor income, so it goes here.
***** TODO P550 does count
Requires rewriting the categories a little: Currently it's classified as labor income.
, "P550"       : "income, year : labor : rural"
***** TODO all sales are "other" (not "normal") capital profits
So far we've been grouping all capital income together, but it has to be split, because the GMF treatment differs across those two groups.
"P7510S9A1" : "income, year : sale : stock"
"P7513S3A1" : "income, year : sale : livestock"
"P7513S1A1" : "income, year : sale : real estate"
"P7513S4A1" : "income, year : sale : stock ?2"
"P7513S2A1" : "income, year : sale : vehicle | equipment"
**** apply the GMF deduction, if that's rational, to "normal capital income".
**** add those two and apply Tarifa 2
*** DONE dividend income
**** The tax schedule is marginal, not average.
**** Dividend income is separate from capital income, with a separate schedule (Tarifa 3). It carries no deductions and no exemptions.
** TODO ? assign dependents to income earners
This was marked "done" but I don't think that's right.
*** DONE any kind of income -- govt transfers, becas, in-kind -- determines dependence
*** DONE data needed for exemptions: "age","disabled","student","relative, child" and "relative, non-child"
**** DONE disabled
***** the variable used: P6310
Aunque ... desea trabajar, ¬øpor qu√© motivo principal no hizo diligencias para buscar un trabajo oinstalar un negocio en las √öLTIMAS 4 SEMANAS?
***** P7500S2: no good
¬øEl mes pasado, recibi√≥ pagos por: d. Pensiones o jubilaciones por vejez, invalidez o sustituci√≥n pensional
***** P7513S12: no good
Durante los √∫ltimos 12 meses recibi√≥ ingresos ocasionales por: l. Devoluciones o reintegros por seguros educativos, incapacidad o invalidez
**** DONE relationship data
5. ¬øCu√°l es el parentesco de ... con el √≥ la jefe del hogar?
1 ¬ª a. Jefe (a) del hogar
2 ¬ª b. Pareja, esposo(a), c√≥nyuge, compa√±ero(a)
3 ¬ª c. Hijo(a), hijastro(a)
4 ¬ª d. Nieto(a)
5 ¬ª e. Otro pariente
6 ¬ª f. Empleado(a) del servicio dom√©stico y sus parientes
7 ¬ª g. Pensionista
8 ¬ª h. Trabajador
9 ¬ª i. Otro no pariente
**** DONE create a "(could be claimed as a) dependent" variable
age < 18 => dependent
age < 23 && student => dependent
family member or partner && income < 260 UVT => dependent
child & disabled => dependent
** TODO renta presuntiva: matters?
Are there a lot of people with renta presuntiva > actual renta?
(If so, must model.)
** TODO ? the file-taxes-if thresholds
see our tax guide, orange text, p. 41
*** Borrowed income and remittances
They count against the tax-paying threshold but is not taxed.
** refs
tax.co/'incomme tax laws, via juan.xlsx'
schedules are on pp 40-41 of guide
  with a typo; should be monotonic
** DONE solved
*** simpler taxes
implemented per "income tax.hs"
**** DONE impuesto de ganancia ocasional
***** 10% flat rate, no deductions, no exemptions.
***** variables
P7513S9A1 (gambling)
P7513S10A1 (inheritance)
**** DONE impuesto de indemnizacion
P7513S8A1 (jury awards)
flat 20%
**** DONE impuesto sobre donaciones
tax = (S - min( S / 5, 2290 uvt)) * 0.1
    where S = sum of all gifts (private or public)
            = P7510S3A1 + P7510S4A1
*** The value of the GMF exemption per year.
2018 = $11.604.600
2017 = $11.150.650
2016 = $10.413.550
*** the two not-exactly-redundant stock variables
**** DONE (verified): They are redundant.
The two questions record the same information. One of them is always zero. An individual's income from sale of stock is equal to the maximum of the two columns.
**** to use them after checking
take their max, or their sum (either computation will give the same result)
*** (internalized): defs
UVT = unidad de valor tributario
*** ignorable income variables
**** special
P7513S12A1 -- taxed at 35%, but the amount reported is probably post-tax
**** untaxed
P7513S11A1 : "income, year : infrequent : refund, tax
P7500S3A1 : "income, month : private : alimony"
P8612S2 : "income, year : edu : non-beca, in-kind" # (nothing called "subsidio" is taxed)
P8612S1 : "income, year : edu : non-beca"          # (nothing called "subsidio" is taxed)
P9460S1 : "income, month : govt : unemployment"
P1668S1A1 : "income, year : govt : familias en accion"
P1668S3A2 : "income, year : govt : familias en su tierra"
P1668S4A2 : "income, year : govt : jovenes en accion"
P1668S2A2 : "income, year : govt : programa de adultos mayores"
P1668S5A2 : "income, year : govt : transferencias por victimizacion"
P1668S1A4 : "income, year : govt : familias en accion, in-kind"
P1668S3A4 : "income, year : govt : familias en su tierra, in-kind"
P1668S4A4 : "income, year : govt : jovenes en accion, in-kind"
P1668S2A4 : "income, year : govt : programa de adultos mayores, in-kind"
P1668S5A4 : "income, year : govt : transferencias por victimizacion, in-kind"
**** Not income
P6871: It describes the frequency with which monthly income is disbursed; it does not bear on the monthly total.
* TODO speed
** don't repeat most income tax code for the two tax regime years
** don't generate purchases_1 with file-origin column
at the end of the file, comment out one line (and manage myriad downstream effects)
* TODO features (#feature)
** new taxes
*** DONE predial: use the coicop
code 12700601, from Gastos_menos_frecuentes_-_Articulos.csv
**** how I verified that the predial tax is not double-counted across a household's members
in purchase_sums.csv, create a 0-or-1 "predial>0" column
add that tot he variables in households.csv summed across people
verify that the maximum "predial>0" variable at the household level is 1
*** DONE financial transactions
0.4% on all monthly income above 11.6 million COP
** goods that dodge the VAT
*** summarized with a parameter, "share of final good that escapes the VAT"
*** the rules : exemptions, exclusions and refunds
If the final good is exempt, and an input carries VAT, the final seller *is* eligible for a refund of the VAT on the input.
If the final good is excluded, and an input carries VAT, the final seller is *not* eligible for a refund of the VAT on the input.
** TODO coicop -> vat : special cases
*** 5310101
DS guesses 19% more often
5% if:
  price < (30 uvt (unidad de valor tributario), aprox. $955800 COP)
  AND estrato <= 3
  AND gave back old fridge when made this purchase (not knowable in our data)
19% otherwise
c.f article 468.1 of tax code
*** 7110101 : bears on INC
In addition to VAT, these are taxed with the impuesto nacional al consumo, INC: for vehicles with value below USD$30000 the rate for the INC is 8%; if the value is above USD$30000, the rate is 16%. (INC is charged at the end of the supply chain only.)
*** 7110102 : make a parameter equal to the maximum of 0 and the premium expressed as a fraction of the earlier price. Initially we'll use 0.
**** our heuristic: assume they sell for less than they bought, therefore 0 VAT
**** what I wrote after talking to David
= second hand purchases of vehicles
Suppose Manufacturer sells to Alice (an ordinary person), and Alice sells to Bob. Alice paid PA, which is equal to PM (what the manufacturer collects) + TA (VAT charged to Alice). Then Bob pays PB, which equals ...

okay something like that. Alice paid X. Now Alice sells to Bob. Alice collects Y from Bob. If Y > X, then Bob pays VAT equal to 0.19*(Y-X).
**** what David emailed that I didn't understand so I talked to him (above)
special tax base for VAT purposes: If a retailer buys a used car priced initially at $20 and resells it at $22, the vat rate is applied to the difference. In addition, these transactions are also taxed with the impuesto nacional al consumo, INC: for vehicles with value below USD$30000 the rate for the INC is 8%; if the value is above USD$30000, the rate is 16%
*** 7120101 : powered bikes : two exceptions
**** rate is 5% for electric bike, 19% for motorbike
**** use another parameter : probability that it's an electric bike
**** in a few low-population areas, it is excluded
Use for those regions that same parameter, the fraction of IVA from the supply chain passed on effectively if not legislatively to the consumer.

goods with different tax rates. Minor details regarding VAT exclusions for Amazonas, VaupÔøΩs, GuainÔøΩa. In addition, only motorbikes are taxed with the impuesto nacional al consumo, INC: an extra 8% is charged if engine is above 200 c.c.
*** TODO 7130101 : VAT rate depends on price
Depending on value an nature. If value is below 50 UVT (aprox $1593000 COP) the VAT rate is 5%, otherwise 19%
*** 7219901, Motores para vehÔøΩculo
Use two more parameters: Pr(motor diesel) & Pr(electric motor)
VAT could be 0, 5 or 19
We're guessing 15
*** 7219902, misc car goods
Make a parameter: Pr(carburator)
5% carburators, 19% anything else.
*** 7350101, mixed transport
param: Pr(air travel)
19 for air travel, otherwise 0.
*** 8200203, smart phones
0 VAT if cheap, 19 if expensive
threshold at 22UVT, aprox. $700800 COP
*** 8300204, Servicio telef√Ø¬ø¬Ωnico residencial (local y larga distancia)
Another parameter: The fraction of the expenditure on which VAT is charged.

These are land line minutes.
The first 325 are VAT-free. After that, 19%.
*** 8300301, Servicios de acceso a Internet bla bla
19% if estrato > 3, else 0.
*** 8300303, Internet cafe
Excluded. Uses the excluded parameter used elsewhere.
19% until final consumer.
*** 9130101, Computadores personales de escritorio (PC, all in one)
19% if above 50UVT, aprox. $1593000 COP
else 0
*** 9130110, Computadores port√Ø¬ø¬Ωtiles
19% above 50UVT, aprox. $1593000 COP
else 0
*** 9130111, Tabletas (ipads)
19% above 22UVT, aprox. $700800; else 0
*** 9310202, Bicicletas para ni√Ø¬ø¬Ωo(a), triciclos, columpios
If below 50 UVT (aprox $1593000 COP) the VAT rate is 5%
If electric (parameter), it's 5%.
Else it's 19%.
*** 9330501, Semillas, bulbos de plantas, c√Ø¬ø¬Ωsped, fertilizantes, fungicidas, abonos, materas, macetas y tiestos para flores y plantas
Two parameters: The common exclusion parameter, and how much of flower stuff is fertilizers.
Almost everything 19%, but fertilizers are excluded.
*** 9520301, Revistas sueltas, comics, novelas gr√Ø¬ø¬Ωficas, historietas, cuentos y cuadernillos para colorear
19% unless culturally awesome (parameter)
*** 9540202, Bol√Ø¬ø¬Ωgrafos, estil√Ø¬ø¬Ωgrafos, plumas, marcadores, plumones y resaltadores
new param: some 0, some 19
*** 12320401, Art√Ø¬ø¬Ωculos personales varios como: gafas de sol, lentes de contacto, cosmeticos, bastones, paraguas y sombrillas, abanicos, llaveros, etc
lentes & lentes de contacto are excluded
others cost 19%
*** 12709903, Servicio de fotocopias, reducciones, ampliaciones, laminaciones, argollados, impresi√Ø¬ø¬Ωn de hojas y documentos, servicio de scanner, servicio de quemado de CD o DVD y trabajos en computador
Not mentioned in tax code, so would assume 19%. But, people buy these services in tiny shops that would not charge VAT, so in our table we're saying 0.
** TODO non-coicop -> vat : special cases
*** 3 : param for % that is rice
rice has a 0 rate, others 5
*** 9 : param for % of queso that is campesino
campesino : 0 vat
else : 5 vat
*** 18 : param for % that is panela
panela is excluded
others 5%
*** 19 : param for % bocadillo | arequipe
bocadillo & arequipe are excluded
others are 19%
*** 21 : % salt
salt is excluded
others are 19%
*** 24 : % water
water exempt, others excluded

** add "has under 10|12" (ala "has child" which <=> min age < 18)
< 10 is interesting because work becomes legal at age (10 rural, 12 urban).
** restaurant|cafeteria tax / todo
*** if bought in cafeteria or restaurant, gets the 8% tax and no VAT, but otherwise they would pay VAT
** income tax / todo
*** ENPH asks about income tax
*** if no SS payments and (or?) making less than min wage, informal
*** primary inputs: income, kids, voluntary pension fund contributions.
*** at most 40% of a person's inncome can be exempt.
* TODO safety (#safe)
** TODO use make.py instead of make
*** divide recipes better, and actually target them
 Currently the only recipe expects something to be built in a parent folder of where it is built.
*** some recipes don't need to depend on all three variables
 the three variables being subsample, strategy, year
** TODO handle csv format outside of pandas
document everything below, then merge the branch into `tests`
*** motivating example
in ./build/vat_rates.py:
  vat_coicop = pd.read_csv( "data/vat/" + "vat-by-coicop.csv"
                          , sep = ";" # TODO PITFALL
                          , encoding = "latin1" )
*** TODO document or add to the preliminary Makefile
 apt install csvtool
 mv data/enph_2017/2_unzipped/csv -> /ssv
 mkdir 3_csv
 cd 2_unzipped/ssv
 for i in *; do csvtool -t ';' -u ',' cat $i -o ../../3_csv/$i; done
*** TODO csvtools deletes whitespace between separators
 For those values, the ssv files read as strings,
 while the csv files read as NaN.
*** TODO csvtool converts numbers containing commas to strings
** TODO the make recipe for goods-by-income-decile.py is confusing
It is only used by the del-rosario strategy, which has its own makefile.
But it is created in the primary Makefile.
** TODO ? replace column names with variables
** TODO the vat-strategy logic needs cleaning
*** how to change those two strategy-conditioning files
In the case of the const strategy, don't use any keys -- neither cap_c nor coicop.
Instead just create the vat rate columns.

There's only this region of code to change. Notice that currently, cap_c gets merged in no matter what. That should only happen if the strategy is not const.

  if True: # add vat to coicop-labeled purchases
    if common.vat_strategy in ["approx","prop-2018-11-31"]:
      purchases_2_digit = purchases.merge( vat_coicop_2_digit, how = "left"
                            , on="coicop-2-digit" )
      purchases_3_digit = purchases.merge( vat_coicop_3_digit, how = "left"
                            , on="coicop-3-digit" )
      purchases_coicop = purchases_2_digit . combine_first( purchases_3_digit )
    else: # PITFALL: For both const and detail strategies, use the primary bridge
      purchases_coicop = purchases.merge( vat_coicop, how = "left", on="coicop" )

  if True: # add vat to capitulo-c-labeled purchases
    purchases_cap_c = purchases.merge( vat_cap_c, how = "left", on="25-broad-categs" )
    purchases = purchases_coicop . combine_first( purchases_cap_c )

*** probelms
It's confusing -- the strategies are all mixed up. For instance the detail bridge is used for the const strategy.
It's inefficient to use the detail bridge for the const strategy. Ought to use approx instead -- or better, make a data set like prop-2018-11-31, but all 1s.
*** code review
**** Only two files condition seriously
Only two files do serious conditioning on the vat_strategy: vat_rates.py and purchases_2_vat.py. (Other files change the names of their inputs and outputs based on the vat_strategy, but their logic is unchanged.)
**** vat_rates.py
vat_rates.py creates our vat keys: the files vat_coicop*.S.csv and vat_cap_c*.S.csv, where * is "" or "_brief", and S is the vat_strategy suffix. The vat_cap_c files use 8-digit coicop codes, not 2- or 3-digit approximations. These files are created for every VAT strategy, whether or not they are used downstream. That's a tiny inefficiency, because they are tiny files.

However, to actually *use* those vat keys in the case of the const strategies is very inefficient. Better would be to use no key at all.
**** purchases_2_vat.py
It inputs these 5 files:
  purchases_1_5_no_origin
  vat_(cap_c|coicop)_brief
  vat_coicop_(2|3)_digit -- version imported depends whether strategy == prop*
** TODO update coicop-vat bridge on OneDrive
** (didn't work) refactor for safety
*** fizzled: safer strings
**** I tried this; see branch "safe-strings"
It turned out not to seem any safer.
**** the idea
Use vars rather than strings.
Use lists of vars rather than regexes for gruops.
And maybe rename yearly to monthly once they become monthly.
** report/pics send some output to output/vat/tables rather than /pics
The Makefile pseudo targets, rather than *_pics, should be called *_reports, and should include those tables.
** pdflatex: send reports to a file, not stdout
*** this way it doesn't drown the python error reports
** centralize routines for categorical variables
* TODO accuracy (#right)
** TODO ? use "where-got
It's 15% missing (in purchases_2_vat.csv). Assume those are fully taxed.
** TODO These error codes apply to all income and expense variables
*** why to use them
The summary measures are otherwise hard to buy -- I see, for instance, a lot of values of 8.17 (that's 98 / 12) for monthly income measures.
*** the error codes
including ordinary purchase value
98 means people know they moved some money but do not know the amount;
00 means no
99 means people do not know if it happened
*** why it's safe to ignore for now
In almost every variable in both people (income) and purchases (value), these error codes do not appear.
In the few variables where they do, they make up a miniscule fraction of observations -- the highest I saw was 0.2%.
And 98 or 99 pesos is almost no money, so including it in someone's total income or total purchase value is not going to meaningfully change the total.
** TODO PITFALL ! people["non-beca sources"] sometimes turns numeric
It is a space-separated list of integers.
In the 1/100 sample it has no lists greater than 1, so it is converted automatically to numeric.
** TODO broken (currently unused) columns
problems in people_1:
  race is boolean; summarizes to NaN
problems in households:
  has-child is NaN
  has-elderly is NaN
  has-(any race) is 0
   this might be because race is boolean in people_1
** ? a default value for freq
*** when is-purchase=1, freq is undefined only .015 % of the time
*** so omitting purchase!=1 observations won't bias our estimate of VAT
*** it will, however, bias (downward) our estimate of consumption
* TODO unsorted, low import (#meh)
** mild data concerns
*** some income questions that could overlap
we assume they don't
**** sale of title
P7510S9 = "rendimientos por venta de titulos"
P7513S4 = "Ventas de acciones y de t√≠tulos valores"
**** loans
P7513S5 = "Reembolsoso de dinero prestado por usted o a otra persona"
P7513S7A1 = " Pr√©stamos particulares"
*** this educational income has an ambiguous source
but zero people in the sample received any of it:
   , "P6207M6"  : "beca from empresa publica ~familiar"
   , "P6207M7"  : "beca from empresa privada ~familiar"
** "P6500 (asalariado income) > 0" should be perfecty corr'd with pension contrib's
** ??? pension contribs = formality.
* DONE | hopefully stale
** DONE [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/makefile_running_var_summaries_by_group_py_too_many_times_from_cron_job_bug_tax_co_web.org][Makefile *still* <2023-09-08 Fri> running baseline programs when nothing has changed \ bug, tax.co.web]]
** DONE use IT to compute household income quantiles
   but keep using "income" for quantiles in the individual-level reports
*** compare IT to "income"
** NAH [[https://github.com/JeffreyBenjaminBrown/public_notes_with_github-navigable_links/blob/master/install_python_3_12_in_ubuntu.org][install python 3.12 in Ubuntu]]
** DONE (now run-makefile.py handles this) Internalize: Baseline config file must match sample size of user config file
:PROPERTIES:
:ID:       6c7711c7-c228-4400-bd26-ce39997e2681
:END:
   This only matters when running by hand;
   the online sim automatically sets both to 1.
** DONE order households by per-capita income
** [[https://github.com/JeffreyBenjaminBrown/knowledge_graph_with_github-navigable_links/blob/master/run_models_anticipating_tax_reform.org][run models anticipating tax reform]]
** estimate november-2018 reform effects
*** the motorbike tax
 After the reform, would be 27% on all bikes.
 Before, 27% on bikes valued above 9 million.
*** new tax on house purchases
 2017-18 : 0.05 rate, threshold of (888.5 + 853.8 mil / 2), only new houses
 2019 proposed : 0.02 rate, same threshold (888.5 + 853.8 mil / 2), all houses
*** add a new column, "tax.co purchase code", and a new tax rate key for it
 Some things (e.g. house purchases) are neither in the COICOP nor the capitulo c system.
*** add new VAT key
** DONE get estimates to Mar√≠a del Rosario Guerra
*** TODO Include the number of goods exempted in the filenames.
 To avoid regeneration.
*** Effects on revenue and total expenditure of a vat of 0% and 5% on the top 5, 10 and 20 products consumed by the bottom 60% of income earners
**** new Python
 Get a list of coicop codes to exempt.
  auto | manual
 From purchases_2, build purchases_2_1.del_rosario, which uses those exemptions.
 For whatever ingests purchases_2, introduce a conditional:
   if the strategy is del_rosario, use purchases_2_1.del_rosario instead.
 Build the overview.
   If we compare total vat_paid in the del_rosario overview to the detail overview, we'll see the effect.
**** use a separate Makefile.goods-by-decile and a separate make-goods-by-decile.sh
***** Makefile.goods-by-decile
 It duplicates relevant parts of the Makefile: everything that's both:
   upstream of goods-by-decile
   downstream of ???
 It uses two arguments:
   exemption_strategy = manual | auto
   number_exempted :: Int
 It duplicates the needed inputs from prop_2018_10_31_0.18
   renaming them del_rosario_2018_11_20
 Its outputs are all labeled del_rosario_2018_11_20
 Any preexisting python programs, it calls using
   subsample = _
   vat_strategy = del_rosario_2018_11_20
   vat_flat_rate=0.18
***** make-goods-by-decile.sh calls both
 It calls the main Makefile to build whatever the other needs, using prop_2018_10_31 and 0.18
 It calls Makefile.goods-by-decile with no parameters.
**** The output
 "vat paid" is already part of the overview table that the makefile produced.
 Changes in expenditures, we assume, are zero.
**** TODO safety: replace 2_1_del_rosario with 2_1_exemptions
 "del rosario" is already in the file suffix
*** use the Ministry of Finance's COICOP-VAT bridge
**** TODO They wrote 19 where we have 0.19; harmonize.
**** TODO make sure there are no more missing values in purchases_2_vat.csv with that key than with the detail key
*** Before and after tax reform Gini
 This is not a clearly defined goal.
 Gini = Num / Denom where
   Num = Sum over all i,j of |xi - xj|
   Denom = 2 * n * (Sum over all i of xi^2)
** DONE before CB meeting
*** for tomorrow
2016 DANE
2018 DANE
2016 DIAN: replicate all income taxes, + ss contribs for employee + simulate employer ss contribs
  and include original income taxes
2018 DIAN: simulate  all income taxes, + ss contribs for employee + simulate employer ss contribs
  and include original 2016 income taxes
Use 2017 value of UVT for all DIAN stuff.
*** estimate tax burdens from dian data
**** goal
At least in aggregate; probably disaggregated too.
***** social security contribs
= sum of a bunch of things
including employer contributions (must impute)
***** income tax = "impuesto de renta de personas naturales"
= sum of a bunch of income taxes
***** wealth tax
https://www.gerencie.com/impuesto-a-la-riqueza.html
it's a nonlinear function:
    simple in 2018, complex in 2016, complex (and different) in 2017
it won't commute across the average wealth.
**** missing from DIAn data
GMF
Contractor
ss contributions
  could impute from exempt labor income, but not disaggregated
  could impute from labor icnome, but no contractor variable
**** DIAN variables to use
***** for 2016
income taxes: 81 through 85
C81DE TRABAJO Y PENSIONES
C82DE CAPITAL Y NO LABORALES
C83POR DIVIDENDOS Y PARTICIP A√ëO 2016 CASILLA 69

also try to duplciate those figures by applying schedules to rentas cedulares
***** for 2018
C32INGS BRUTOS RENTAS TRABAJO
to get ss contribs.
---- ASK JUAN ----

C34RENTA L√çQUIDA TRABAJO
C42RENTA L√çQUIDA CEDULAR PENSIONES
C46RENTA L√çQUIDA CAPITAL
  # not C53RENTA L√çQUIDA CEDULAR CAPITAL
C58RENTA L√çQUIDA NO LABORALES
  # not C66RENTA L√çQUIDA CEDULAR NO LABORAL

C74RENTAS L√çQUIDAS GRAVABLES DIVIDENDOS Y PARTICIP
  # not obvious, but use this

C80GANANCIAS OCASIONALES GRAVABLES
  # ambiguous. skip before CB.
*** change IVA for 2018
beer and soda: 19%
** DONE retire hypotheticals from Makefiles, scripts, filenames
*** keep the "detail" strategy, but make it implicit
*** regexes to seek and purge
detail, approx, prop_, strategy, ministry
vat_flat_rate
** from Jerome de Henau, mostly soft (non-code, non-data)
 more kinds of households
   one person, female, earning
   gender-income interaction
 stakeholders
 unions and employer organizations
 feminist groups, womens' groups, groups for domestic workers
 anyone intnerested in poverty, homelessness, agric land reform
 any disadvantaged group has similar interests
 banks care, if they can attract investment, and look charitable
     lack of corruption is a big attractor
     can be called "improving the functioning of the state"
 average tax rate: easier to understand than marginal
** code reviews
*** TODO ? 2019 05 06
**** the "duplicated" problem in python/build/purchases/capitulo_c.py
*** 2019 01 15-ish
**** have read through
 buildings.py
 classes.py
 common.py
 households.py
 people*.py
 purchases*.py
 vat_rates.py
**** skipped: build/people/main.py / income variable creation
 resume at:
     # compute income totals, drop components
**** glossed over: ss_contribs.py
** someday mypy might work
 So far pandas does not provide stubs,
 so types like pd.Series cannot be used.
* TODO not to duplicate
** "file-origin" is commented out
If we ever again need a purchase data set that tracks the file each purchase is from,
that's already implemented.
** some pics are drawn but not included in the report
*** people/spending
* TODO PITFALLs in code
** in my own
*** the special motorcycle tax
It is represented in code, not data.
  at purhcases_2_vat.py
It is treated as VAT.
*** "income, rank n" is meaningful at the household level
It is the income in pesos of the nth highest earener,
not a boolean variable.
** Makefile: be sure all program output comes at the end
And that (at least) the last thing it creates is a Makefile target.
Otherwise `make` might believe a target is up to date when the program responsible for it did not complete.
** in Python
*** underscores in filenames seem to confuse Matplotlib's font_manager
 https://github.com/matplotlib/matplotlib/issues/14536
*** every code folder needs a __init__.py file
as of some recent version of Python
*** some import names clobber others
When using the syntax "import _ as x", Python will only bind one library to the name "x". When collisions occur, the latest binding wins.

When I split common.py into common.misc and common.cl_args, I imported both as "c". I only fixed the code where a collision occurred.
** in Jupyter: local modules must begin with a capital letter to be imported in Jupyter
Keeping all code in a top-level folder that starts with a capital letter solves this problem.
Subfolders and files suffer no naming restriction.
** in Pandas
*** cannot convert to int when some values are NaN
 Hence muni code is float.
*** the boolean value of np.nan is True
*** concat v. append
Neither forces you to specify the axis.
Concat is more general.
*** two columns can have the same name, silently
This can result in errors like "cannot add str to int".
Because if you add a number to a column, and another shares its name,
it will try to add the number to both.
*** categorical variables require a "map" step only when created, not when read
 It's to convert them from a number to a string.
 For instance, creating the "people" table looks like this:
   people["race"] = pd.Categorical(
     people["race"].map( race_key )
     , categories = list( race_key.values() )
     , ordered = True)
 whereas reading it would look like this:
   people["race"] = pd.Categorical(
     people["race"]
     , categories = list( race_key.values() )
     , ordered = True)
** in Matplotlib
*** change every background color: methods that didn't work
**** plt.rcParams['axes.facecolor] = 'b'
Changes the legend background, nothing else
**** ax.set_facecolor('b')
no discernible effect
**** ax.patch.set_facecolor('b')
no discernible effect
**** fig.add_subplot(2, 1, 1, facecolor = "red")
causes the second figure not to be drawn,
no other discernible effect
***** code example
    fig = Figure()

    ax = fig.add_subplot(2, 1, 1, facecolor = "red")
    drawText( ax, lines )
**** pdf.savefig() overrides background color in figures
https://stackoverflow.com/questions/56606122/matplotlib-use-the-same-custom-font-in-every-kind-of-text-axes-title-text
*** range errors in cdfs sometimes disappear when the xrange is restricted
  draw.single_cdf( x[ x<10 ], # PITFALL : not restricting x here => a range error
                   "cdf of (spending / income) across income-earning households"
                   , xmin = 0, xmax = 8
                 )
* HANDY snippets
pd.set_option('display.max_rows', 200)
pd.set_option('display.min_rows', 200)
* to explain in paper : institution details | judgment calls
** to identify dependents, we assume ...
The tax code is ambiguous -- does a high-income disabled person still be claimed as a dependent? Do they pay taxes? Can they in turn claim dependents? We assume no, yes and yes. See build.people.main for details.
** the proxy for disability is imperfect
It is that they responded "for health reasons" to the question "although you want to work, why did you not look for work?"
** all the COICOP exceptions
** benefits/expenses that we ignored
*** P1651S1 : fulfillment insurance
ambiguous whether it's an expense or part of salary, and the frequency is roughly unavailable -- we know the freq only for the most recent contract.

"¬øPor este trabajo, le descontarono pag√≥ p√≥liza de cumplimiento? ¬øcu√°nto?"
*** ambiguous definition |  missing values | impossible values
P6920* : pension fund contributions
P6990* : work injury insurance
P9450* : caja de compensacion
** no vat 6 ¬ª 6.Supermercado y tiendas de barrio
Supermarkets charge VAT, but there are more tiendas de barrio, so we're saying this corresponds to no VAT.

Could go into more detail, about each category.
** we include infrequent income in monthly income
sales, loan repayment, jury awards, gambling winnings, inheritance, etc.
** We don't count borrowing as income, because you don't pay for your income with later income.
** P7500S3A1 : alimony. ignoring, to avoid double-counting.
** terms in the ENPH
*** Unemployed
Any of the following qualify. The first is the bulk of them.

- During the past four weeks, actively searching for a job and available last week to start in case of success;
  P6240 : time use # 2 = buscando trabajo
  P6350 : available to work # 1 = available

- Employed at least 2 weeks over the last 12 months, has actively searched after last job and was available last week to start in case of success;

- Not employed at least 2 weeks over the last 12 months, has actively searched after last job and was available last week to start in case of success.
*** Inactive
Permanent disability; or During the past four weeks, actively searching for a job and not available last week to start in case of success; or not willing to work; or full-time students; or employed at least 2 weeks over the last 12 months but has not actively searched after last job; or full time domestic work; or has not searched for a job during the past 12 months; or has searched a job over the last 12 months but was not available to start last week in case of success.
** ENPH asked on the 15th about consumption on days 1-14
** where-got: if missing, assume taxed
# Even when purhcase=1, in some files there are a substantial number
# of observations where where-got is missing. A way to see that:
util.dwmByGroup( "file-origin",
                 data.purchases[ data.purchases["is-purchase"]==1 ]
                 [["file-origin","where-got"]] )
** freq: if missing, discarded
*** when is-purchase=1, freq is undefined only .015 % of the time
*** so omitting purchase!=1 observations won't bias our estimate of VAT
*** it will, however, bias (downward) our estimate of consumption
** we don't include property purchases
*** there is no VAT on land purchases
*** there is 5% VAT for purchases of *new* homes in excess of 880 M pesos
**** but the data only reports newness in the case of second homes
**** that's a very small fraction of the economy
* discovered from the data
** the 200 / 1400 missing COICOP codes appear not to matter much
*** the 80% of purchases that carry 0 VAT are due to a literally 0 VAT, not a NaN VAT
*** in the 10% sample less than 0.3% of the purchases have a NaN vat rate
x = purchases["vat-rate"]
>>> len(x)
7458243
>>> len( x[ x.isnull() ] )
28986
>>> 28986 / 7458243
0.0038864381329490067
* interesting
The Saez & Zuchman book offers a website where you can simulate any tax.
* history of tax changes
** IVA changed
   Notes from meeting, 2020 09 07.
*** products
**** feminine hygiene
**** sodas
**** school supplies
*** some changed by law, some by court order
*** look for Juan's post early in the year comparing tax changes
